type: edu
files:
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |
    import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$hs.kotlin.version"
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
            classpath "org.jetbrains.kotlin:kotlin-allopen:$hs.kotlin.version"
            classpath "org.jetbrains.kotlin:kotlin-noarg:$hs.kotlin.version"
        }
    }

    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: "kotlin-spring"
    apply plugin: "kotlin-jpa"

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
        implementation 'org.jetbrains.kotlin:kotlin-reflect'
    }

    tasks.withType(KotlinCompile) {
        kotlinOptions {
            freeCompilerArgs = ['-Xjsr305=strict']
            jvmTarget = "$hs.kotlin.javaVersion"
        }
    }
  learner_created: false
- name: src/cinema/Application.kt
  visible: true
  text: |
    package cinema

    import org.springframework.boot.autoconfigure.SpringBootApplication
    import org.springframework.boot.runApplication

    @SpringBootApplication
    class Application

    fun main(args: Array<String>) {
        runApplication<Application>(*args)
    }
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |
    import cinema.ApplicationKt;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";

        private static final Gson gson = new Gson();

        public CinemaTests() {
            super(ApplicationKt.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                        resp.getRequest().getMethod() + " " +
                                resp.getRequest().getLocalUri() +
                                " should respond with status code " + status + ", " +
                                "responded: " + resp.getStatusCode() + "\n\n" +
                                "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("available_seats",
                                    isArray(
                                            81,
                                            isObject()
                                                    .value("row", isInteger(i -> i >= 1 && i <= 9))
                                                    .value("column", isInteger(i -> i >= 1 && i <= 9))
                                                    .value("price", isInteger(price -> price == 10 || price == 8))
                                    )
                            )
                            .value("total_columns", 9)
                            .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", "1",
                            "column", "1"
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("token", isString())
                            .value("ticket",
                                    isObject()
                                            .value("row", 1)
                                            .value("column", 1)
                                            .value("price", 10)
                            )
            );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", "1",
                            "column", "1"
                    ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                            .anyOtherValues()
            );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", "10",
                            "column", "1"
                    ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                            .anyOtherValues()
            );

            response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", "1",
                            "column", "10"
                    ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                            .anyOtherValues()
            );

            response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", "-1",
                            "column", "-1"
                    ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                            .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", 2,
                            "column", 5
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("token", isString())
                            .value("ticket",
                                    isObject()
                                            .value("row", 2)
                                            .value("column", 5)
                                            .value("price", 10)
                            )
            );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                    "/return",
                    gson.toJson(Map.of(
                            "token", wrongToken
                    ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                            .anyOtherValues()
            );

            response = post(
                    "/return",
                    gson.toJson(Map.of(
                            "token", tokenFromResponse
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("returned_ticket",
                                    isObject()
                                            .value("row", 2)
                                            .value("column", 5)
                                            .value("price", 10)
                            )
            );

            return CheckResult.correct();
        }

        CheckResult testTokenInvalidation() {

            HttpResponse response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", 3,
                            "column", 6
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("token", isString())
                            .value("ticket",
                                    isObject()
                                            .value("row", 3)
                                            .value("column", 6)
                                            .value("price", 10)
                            )
            );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);
            String tokenFromResponse = jsonResponse.get("token").getAsString();

            response = post(
                    "/return",
                    gson.toJson(Map.of(
                            "token", tokenFromResponse
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("returned_ticket",
                                    isObject()
                                            .value("row", 3)
                                            .value("column", 6)
                                            .value("price", 10)
                            )
            );

            response = post(
                    "/return",
                    gson.toJson(Map.of(
                            "token", tokenFromResponse
                    ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                            .anyOtherValues()
            );

            return CheckResult.correct();
        }

        CheckResult testReturnedTicketAvailability() {

            HttpResponse response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", 3,
                            "column", 6
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("token", isString())
                            .value("ticket",
                                    isObject()
                                            .value("row", 3)
                                            .value("column", 6)
                                            .value("price", 10)
                            )
            );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);
            String tokenFromResponse = jsonResponse.get("token").getAsString();

            response = post(
                    "/return",
                    gson.toJson(Map.of(
                            "token", tokenFromResponse
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("returned_ticket",
                                    isObject()
                                            .value("row", 3)
                                            .value("column", 6)
                                            .value("price", 10)
                            )
            );

            response = post(
                    "/purchase",
                    gson.toJson(Map.of(
                            "row", 3,
                            "column", 6
                    ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                    isObject()
                            .value("token", isString())
                            .value("ticket",
                                    isObject()
                                            .value("row", 3)
                                            .value("column", 6)
                                            .value("price", 10)
                            )
            );

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
                this::testEndpoint,
                this::testEndpointAvailableSeats,
                this::testPurchaseTicket,
                this::testErrorMessageThatTicketHasBeenPurchased,
                this::testErrorMessageThatNumbersOutOfBounds,
                this::testReturnTicket,
                this::testTokenInvalidation,
                this::testReturnedTicketAvailability
        };
    }
  learner_created: false
- name: src/cinema/SeatExceptionHandler.kt
  visible: true
  text: |+
    package cinema

    import org.springframework.http.HttpStatus
    import org.springframework.http.ResponseEntity
    import org.springframework.web.bind.annotation.ExceptionHandler
    import org.springframework.web.bind.annotation.RestControllerAdvice

    /**
     * Created with IntelliJ IDEA.
    $ Project: Cinema Room REST Service (Kotlin)
     * User: rodrigotroy
     * Date: 06-08-23
     * Time: 21:55
     */
    @RestControllerAdvice
    class GlobalExceptionHandler {

        @ExceptionHandler(SeatException::class)
        fun handleSeatException(ex: SeatException): ResponseEntity<ErrorResponse> {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ErrorResponse(ex.message ?: "Unknown error"))
        }
    }

  learner_created: true
- name: src/cinema/test.http
  visible: true
  text: |
    //@no-log
    ###
    GET http://localhost:28852/seats

    ###
    POST http://localhost:28852/purchase
    Content-Type: application/json

    {
      "row": 1,
      "column": 1
    }

    > {%
        client.test("Request executed successfully", function () {
            client.assert(response.status === 200, "Response status is not 200");
        });
    %}
  learner_created: true
- name: src/cinema/TheatreController.kt
  visible: true
  text: |
    package cinema

    import org.springframework.http.ResponseEntity
    import org.springframework.web.bind.annotation.GetMapping
    import org.springframework.web.bind.annotation.PostMapping
    import org.springframework.web.bind.annotation.RequestBody
    import org.springframework.web.bind.annotation.RestController

    /**
     * Created with IntelliJ IDEA.
    $ Project: Cinema Room REST Service (Kotlin)
     * User: rodrigotroy
     * Date: 05-08-23
     * Time: 18:36
     */

    @RestController
    class TheatreController {
        private val totalRows = 9
        private val totalColumns = 9
        private var seats: MutableList<Seat> = List(totalRows) { row ->
            List(totalColumns) { col ->
                Seat(row + 1, col + 1)
            }
        }.flatten().toMutableList()


        @GetMapping("/seats")
        fun getSeats(): TheatreLayout {
            val availableSeats = seats.filterNot { it.purchased }
            return TheatreLayout(totalRows, totalColumns, availableSeats)
        }

        @PostMapping("/purchase")
        fun purchaseSeat(@RequestBody request: SeatRequest): ResponseEntity<Seat> {
            val seat = seats.find { it.row == request.row && it.column == request.column }

            return when {
                seat == null || request.row > totalRows || request.column > totalColumns ->
                    throw SeatException("The number of a row or a column is out of bounds!")

                seat.purchased -> throw SeatException("The ticket has been already purchased!")

                else -> {
                    seat.purchased = true
                    ResponseEntity.ok(seat)
                }
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/20459#comment
status: Failed
feedback:
  message: Execution failed
  time: "Mon, 07 Aug 2023 02:13:38 UTC"
record: -1
